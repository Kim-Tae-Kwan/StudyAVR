
Debug.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000154  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084e  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000783  00000000  00000000  00000aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000240  00000000  00000000  00001231  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ad  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003b  00000000  00000000  00001855  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e5       	ldi	r30, 0x54	; 84
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	4d c0       	rjmp	.+154    	; 0x150 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
unsigned char B = 0xBB;
unsigned char C = 0xCC;
unsigned char *ADD = 0x130;

int main()
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
  c0:	8a e3       	ldi	r24, 0x3A	; 58
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
	DDRF = 0xFF;
  ca:	81 e6       	ldi	r24, 0x61	; 97
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
	
	ADD = 0x140;
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ADD+0x1>
  dc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ADD>
	*ADD = 0x11;
  e0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ADD>
  e4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ADD+0x1>
  e8:	21 e1       	ldi	r18, 0x11	; 17
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
	*(ADD+1)=0x22;
  ee:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ADD>
  f2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ADD+0x1>
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	22 e2       	ldi	r18, 0x22	; 34
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
	*(ADD+2)=0x33;
  fe:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ADD>
 102:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ADD+0x1>
 106:	02 96       	adiw	r24, 0x02	; 2
 108:	23 e3       	ldi	r18, 0x33	; 51
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
	*(ADD+4)=0x44;
 10e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ADD>
 112:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ADD+0x1>
 116:	04 96       	adiw	r24, 0x04	; 4
 118:	24 e4       	ldi	r18, 0x44	; 68
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
	
	A = 0xBB;
 11e:	8b eb       	ldi	r24, 0xBB	; 187
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	B=C-A;
 124:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <C>
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12c:	f9 2f       	mov	r31, r25
 12e:	f8 1b       	sub	r31, r24
 130:	8f 2f       	mov	r24, r31
 132:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <B>
	
	PORTA = A;
 136:	8b e3       	ldi	r24, 0x3B	; 59
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
	PORTB = B;
 142:	88 e3       	ldi	r24, 0x38	; 56
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <B>
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
	
	while(1)
	{
		
		
	}
 14e:	ff cf       	rjmp	.-2      	; 0x14e <main+0x96>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
