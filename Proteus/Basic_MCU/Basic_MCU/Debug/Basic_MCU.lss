
Basic_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b4  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ee  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a1  00000000  00000000  0000127a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000151c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040b  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009a  00000000  00000000  0000194b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	2c c0       	rjmp	.+88     	; 0xf4 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>


int main(void)
{
	DDRC = 0xFF; // 0b1111_1111
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 bb       	out	0x14, r24	; 20
	//PORTC = 0xFE; // 0b1111_0000
	
	DDRD = 0xF0;
  a2:	80 ef       	ldi	r24, 0xF0	; 240
  a4:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x0F;
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	82 bb       	out	0x12, r24	; 18
	char temp = 0xFE;
	int chage = 0;
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
	DDRC = 0xFF; // 0b1111_1111
	//PORTC = 0xFE; // 0b1111_0000
	
	DDRD = 0xF0;
	PORTD = 0x0F;
	char temp = 0xFE;
  ae:	8e ef       	ldi	r24, 0xFE	; 254
		
		if(chage==0)
			temp = (temp <<1)+1;
		else if (chage==1)
		{
			temp = (temp >>1) | 0x80 ;
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
		//if(PIND == 0x0E) PORTC = 0xF1;
		//else if(PIND == 0x0D) PORTC = 0xF2;
		//else if(PIND == 0x0B) PORTC = 0xF4;
		//else if(PIND == 0x07) PORTC = 0xF8;
		
		PORTC = temp;
  b8:	85 bb       	out	0x15, r24	; 21
		if(temp == 0x7F)
  ba:	8f 37       	cpi	r24, 0x7F	; 127
  bc:	69 f0       	breq	.+26     	; 0xd8 <main+0x3a>
			chage=1;
		else if (temp==0xFE)
  be:	8e 3f       	cpi	r24, 0xFE	; 254
  c0:	19 f0       	breq	.+6      	; 0xc8 <main+0x2a>
		{
			chage=0;
		}
		
		if(chage==0)
  c2:	21 15       	cp	r18, r1
  c4:	31 05       	cpc	r19, r1
  c6:	29 f4       	brne	.+10     	; 0xd2 <main+0x34>
			temp = (temp <<1)+1;
  c8:	88 0f       	add	r24, r24
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	24 2f       	mov	r18, r20
  ce:	39 2f       	mov	r19, r25
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <main+0x42>
		else if (chage==1)
  d2:	21 30       	cpi	r18, 0x01	; 1
  d4:	31 05       	cpc	r19, r1
  d6:	21 f4       	brne	.+8      	; 0xe0 <main+0x42>
		{
			temp = (temp >>1) | 0x80 ;
  d8:	86 95       	lsr	r24
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	26 2f       	mov	r18, r22
  de:	35 2f       	mov	r19, r21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	7f e3       	ldi	r23, 0x3F	; 63
  e2:	ed e0       	ldi	r30, 0x0D	; 13
  e4:	f3 e0       	ldi	r31, 0x03	; 3
  e6:	71 50       	subi	r23, 0x01	; 1
  e8:	e0 40       	sbci	r30, 0x00	; 0
  ea:	f0 40       	sbci	r31, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x48>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x52>
  f0:	00 00       	nop
  f2:	e2 cf       	rjmp	.-60     	; 0xb8 <main+0x1a>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
